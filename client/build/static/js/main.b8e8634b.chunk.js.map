{"version":3,"sources":["utils/actions.js","utils/reducers.js","utils/GlobalState.js","utils/IndexDB.js","components/ProductItem/index.js","utils/queries.js","assets/loading.gif","components/ProductList/index.js","components/Categorymenu/index.js","components/CartItem/index.js","utils/auth.js","components/Cart/index.js","pages/Main.js","utils/mutations.js","pages/Login.js","components/Nav/index.js","pages/Detail.js","pages/Signup.js","components/Jumbotron/index.js","pages/Success.js","pages/NoMatch.js","pages/OrderHistory.js","App.js","reportWebVitals.js","index.js"],"names":["UPDATE_PRODUCTS","UPDATE_CURRENT_CATEGORY","UPDATE_CATEGORIES","UPDATE_CART_QUANTITY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","TOGGLE_CART","reducer","state","action","type","products","cartOpen","cart","product","map","_id","purchaseQuantity","newState","filter","length","categories","currentCategory","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","idbPromise","storeName","method","item","Promise","resolve","reject","request","window","indexedDB","open","onupgradeneeded","e","console","log","db","target","result","createObjectStore","keyPath","createIndex","onerror","onsuccess","tx","transaction","store","objectStore","put","all","getAll","delete","oncomplete","close","ProductItem","image","name","price","className","to","alt","src","onClick","itemInCart","find","cartItem","QUERY_PRODUCTS","gql","QUERY_CATEGORIES","QUERY_USER","QUERY_CHECKOUT","ProductList","useQuery","loading","data","useEffect","category","loadSymbol","CategoryMenu","categoryData","forEach","id","CartItem","role","removeFromCart","decode","this","getToken","token","isTokenExpired","decoded","Date","now","exp","err","error","localStorage","getItem","idToken","setItem","location","assign","removeItem","stripePromise","loadStripe","Cart","useLazyQuery","getCheckout","toggleCart","a","getCart","then","res","redirectToCheckout","sessionId","checkout","session","sum","toFixed","calculateTotal","Auth","loggedIn","productIds","push","variables","Main","LOGIN","ADD_USER","ADD_ORDER","Login","useState","email","password","formState","setFormState","useMutation","login","handleFormSubmit","event","preventDefault","mutationResponse","handleChange","onSubmit","htmlFor","placeholder","onChange","Nav","href","logout","Detail","useParams","currentProduct","setCurrentProduct","indexedProducts","VanillaTilt","init","document","querySelector","max","speed","glare","description","disabled","p","parseInt","loadingSpin","Signup","addUser","firstName","lastName","Jumbotron","children","style","height","clear","paddingTop","textAlign","Success","addOrder","setTimeout","saveOrder","NoMatch","OrderHistory","user","orders","order","purchaseDate","toLocaleDateString","index","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.b8e8634b.chunk.js","sourcesContent":["// update exports for products, categories\r\nexport const UPDATE_PRODUCTS = \"UPDATE_PRODUCTS\";\r\n\r\nexport const UPDATE_CURRENT_CATEGORY = \"UPDATE_CURRENT_CATEGORY\";\r\nexport const UPDATE_CATEGORIES = \"UPDATE_CATEGORIES\";\r\n\r\n\r\n// Everything Cart related:\r\nexport const UPDATE_CART_QUANTITY = \"UPDATE_CART_QUANTITY\";\r\n\r\nexport const ADD_TO_CART = \"ADD_TO_CART\";\r\nexport const ADD_MULTIPLE_TO_CART = \"ADD_MULTIPLE_TO_CART\";\r\n\r\nexport const REMOVE_FROM_CART = \"REMOVE_FROM_CART\";\r\nexport const CLEAR_CART = \"CLEAR_CART\";\r\n\r\nexport const TOGGLE_CART = \"TOGGLE_CART\";\r\n","import { useReducer } from 'react';\r\nimport {\r\n  UPDATE_PRODUCTS,\r\n  ADD_TO_CART,\r\n  UPDATE_CART_QUANTITY,\r\n  REMOVE_FROM_CART,\r\n  ADD_MULTIPLE_TO_CART,\r\n  UPDATE_CATEGORIES,\r\n  UPDATE_CURRENT_CATEGORY,\r\n  CLEAR_CART,\r\n  TOGGLE_CART,\r\n} from './actions';\r\n\r\nexport const reducer = (state, action) => {\r\n    switch (action.type) {\r\n      case UPDATE_PRODUCTS:\r\n        return {\r\n          ...state,\r\n          products: [...action.products],\r\n        };\r\n  \r\n      case ADD_TO_CART:\r\n        return {\r\n          ...state,\r\n          cartOpen: true,\r\n          cart: [...state.cart, action.product],\r\n        };\r\n        \r\n      case ADD_MULTIPLE_TO_CART:\r\n        return {\r\n          ...state,\r\n          cart: [...state.cart, ...action.products],\r\n        };\r\n      case UPDATE_CART_QUANTITY:\r\n        return {\r\n          ...state,\r\n          cartOpen: true,\r\n          cart: state.cart.map((product) => {\r\n            if (action._id === product._id) {\r\n              product.purchaseQuantity = action.purchaseQuantity;\r\n            }\r\n            return product;\r\n          }),\r\n        };\r\n      case REMOVE_FROM_CART:\r\n        let newState = state.cart.filter((product) => {\r\n          return product._id !== action._id;\r\n        });\r\n        return {\r\n          ...state,\r\n          cartOpen: newState.length > 0,\r\n          cart: newState,\r\n        };\r\n  \r\n      case CLEAR_CART:\r\n        return {\r\n          ...state,\r\n          cartOpen: false,\r\n          cart: [],\r\n        };\r\n  \r\n      case TOGGLE_CART:\r\n        return {\r\n          ...state,\r\n          cartOpen: !state.cartOpen,\r\n        };\r\n  \r\n      case UPDATE_CATEGORIES:\r\n        return {\r\n          ...state,\r\n          categories: [...action.categories],\r\n        };\r\n  \r\n      case UPDATE_CURRENT_CATEGORY:\r\n        return {\r\n          ...state,\r\n          currentCategory: action.currentCategory,\r\n        };\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  \r\n  export function useProductReducer(initialState) {\r\n    return useReducer(reducer, initialState);\r\n  }\r\n  ","import React, { createContext, useContext } from \"react\";\r\nimport { useProductReducer } from \"./reducers\";\r\n\r\n\r\nconst StoreContext = createContext();\r\nconst { Provider } = StoreContext;\r\n\r\nconst StoreProvider = ({ value = [], ...props }) => {\r\n    const [state, dispatch] = useProductReducer(\r\n        {\r\n            products: [],\r\n            cart: [],\r\n            cartOpen: false,\r\n            categories: [],\r\n            currentCategory: \"\",\r\n        }\r\n    );\r\n    return < Provider value={[state, dispatch]} {...props} />;\r\n};\r\n\r\nconst useStoreContext = () => {\r\n    return useContext(StoreContext);\r\n};\r\n\r\nexport { StoreProvider, useStoreContext };","\r\n// Change product item and categories display method\r\n\r\n\r\nexport function idbPromise(storeName, method, item) {\r\n    return new Promise((resolve, reject) => {\r\n\r\n        const request = window.indexedDB.open(\"Mnifty\", 1);\r\n        // pre-declaring variables that'll be used in nested functions.\r\n        // let db, tx, store;\r\n\r\n        request.onupgradeneeded = function (e) {\r\n            // a console log for redundancy\r\n            console.log(\"this is the update\")\r\n            const db = e.target.result;\r\n            console.log(db)\r\n            // beep boop beep boop\r\n            console.log(\"BEEP BOOP BEEP BOOP\")\r\n            /*\r\n            *** @createObjectStore: this creates the store with the name of \"cart\"\r\n            ***     The keypath is set to \"_id\" so we can reference the specific item id to pull up any item   -(I think. likely... probably.....)\r\n            ***         (\"it's better to set it to something unique so no unexpected duplicates show up\")\r\n            */\r\n            const cart = db.createObjectStore(\"cart\", { keyPath: \"_id\" });\r\n            /*\r\n            *** @createIndex: This is establishing the index that we will reference later\r\n            ***     The first string can be called to retrieve everything with the same characters; the unique or not unique item name\r\n            ***     The second string is what it's stored in the database under; the column name, where the item name is a child of that column.\r\n            */\r\n            cart.createIndex(\"ItemName\", \"name\");\r\n            cart.createIndex(\"itemDescription\", \"description\");\r\n            cart.createIndex(\"itemPrice\", \"price\");\r\n            cart.createIndex(\"itemImage\", \"image\")\r\n            // cart.add({name: \"horse\", description:\"this is a horse\", price: 3, image: \".jpg\"})\r\n        };\r\n\r\n        // this is what happens when it errors\r\n        request.onerror = function (e) {\r\n            console.log(\"there was a huge error or something\")\r\n        };\r\n\r\n        request.onsuccess = function (e) {\r\n            console.log(\"this worked!!!!!!!\")\r\n            const db = request.result;\r\n            // const transaction = db.transaction([\"\"], \"readwrite\");\r\n            // const cart = transaction.objectStore(\"\");\r\n            // const priceitemPriceIndex = cart.index(\"\");\r\n            // const ItemName = cart.index(\"\");\r\n            // const itemDescription = cart.index(\"\");\r\n            // const itemImage = cart.index(\"\");\r\n            const tx = db.transaction(storeName, \"readwrite\");\r\n            const store = tx.objectStore(storeName);\r\n\r\n            db.onerror = function (e) {\r\n                console.log(\"error with\", e);\r\n            };\r\n\r\n            switch (method) {\r\n                case \"put\":\r\n                    store.put(item);\r\n                    resolve(item);\r\n                    break;\r\n                case \"get\":\r\n                    const all = store.getAll();\r\n                    all.onsuccess = function () {\r\n                        resolve(all.result);\r\n                    };\r\n                    break;\r\n                case \"delete\":\r\n                    store.delete(item._id);\r\n                    break;\r\n                default:\r\n                    console.log(\"No Valid Method detected\");\r\n                    break;\r\n            }\r\n\r\n            tx.oncomplete = function () {\r\n                db.close();\r\n            };\r\n\r\n            // SAMPLE REQUESTS TO THE DATABASE\r\n            // // Return an item by keyPath\r\n            // const getRequest = toDoListStore.get(\"1\");\r\n            // //async  - need an event to execute when it occurs. \r\n            // getRequest.onsuccess = () => {\r\n            //     console.log(getRequest.result);\r\n            // };\r\n\r\n            // // Return an item by index\r\n            // const getRequestIdx = statusIndex.getAll(\"complete\");\r\n            // //async  - need an event to execute when it occurs. \r\n            // getRequestIdx.onsuccess = () => {\r\n            //     console.log(getRequestIdx.result);\r\n            // };\r\n        };\r\n    })\r\n}","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// commented out, not necessary\r\n// import { pluralize } from \"../../utils/helpers\"\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { ADD_TO_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\r\n\r\n// importing indexDB as idbPromise to manage cart storage\r\nimport { idbPromise } from \"../../utils/IndexDB\";\r\n\r\n\r\n/*\r\n*** ProductItem defines the attributes of item through deconstruction\r\n***     as well as deconstructs store context,\r\n***     it then contains a function and returns the 'HTML'\r\n*/\r\n\r\nfunction ProductItem(item) {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const {\r\n    image,\r\n    name,\r\n    _id,\r\n    price,\r\n  } = item;\r\n\r\n  const { cart } = state\r\n\r\n  const addToCart = () => {\r\n    const itemInCart = cart.find((cartItem) => cartItem._id === _id)\r\n    if (itemInCart) {\r\n      dispatch({\r\n        type: UPDATE_CART_QUANTITY,\r\n        _id: _id,\r\n      });\r\n      idbPromise('cart', 'put', {\r\n        ...itemInCart\r\n      });\r\n    } else \r\n    {\r\n      dispatch({\r\n        type: ADD_TO_CART,\r\n        product: { ...item,}\r\n      });\r\n      idbPromise('cart', 'put', { ...item });\r\n    \r\n    }\r\n  }\r\n\r\n\r\n//   returns the visible elements to be displayed.\r\n// How can I hid the add to cart button when the item is added?\r\n  return (\r\n    <div className=\"card px-1 py-1 glassCard\">\r\n      <Link to={`/products/${_id}`}>\r\n        <img\r\n          alt={name}\r\n          src={`/images/${image}`}\r\n        />\r\n        <p>{name}</p>\r\n      </Link>\r\n      <div>\r\n        <span>{price} MUT Tokens</span>\r\n      </div>\r\n      <button \r\n      className=\"itemButton\"\r\n      onClick={addToCart}>+ ADD TO CART</button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductItem;\r\n","import { gql } from '@apollo/client';\r\n\r\nexport const QUERY_PRODUCTS = gql`\r\n  query getProducts($category: ID) {\r\n    products(category: $category) {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      image\r\n      category {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_ALL_PRODUCTS = gql`\r\n  {\r\n    products {\r\n      _id\r\n      name\r\n      description\r\n      price\r\n      category {\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CATEGORIES = gql`\r\n  {\r\n    categories {\r\n      _id\r\n      name\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_USER = gql`\r\n  {\r\n    user {\r\n      firstName\r\n      lastName\r\n      orders {\r\n        _id\r\n        purchaseDate\r\n        products {\r\n          _id\r\n          name\r\n          description\r\n          price\r\n          image\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const QUERY_CHECKOUT = gql`\r\n  query getCheckout($products: [ID]!) {\r\n    checkout(products: $products) {\r\n      session\r\n    }\r\n  }\r\n`;","export default __webpack_public_path__ + \"static/media/loading.6281c6f4.gif\";","import React, { useEffect } from 'react';\r\nimport ProductItem from '../ProductItem';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { UPDATE_PRODUCTS } from '../../utils/actions';\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_PRODUCTS } from '../../utils/queries';\r\n// import { idbPromise } from '../../utils/IndexDB';\r\n// This isn't imported as \"loading\" to prevent any potential conflicts\r\nimport loadSymbol from '../../assets/loading.gif';\r\n\r\n\r\n/*\r\n*** @ProductList deconstructs important things from set locations\r\n***     then it utilizes those within important functions\r\n*** @useEffect: if there's data, then loop through it and append that data\r\n***     Else, if it's loading, it's going to display the loading symbol.\r\n*** @filterProducts filters products based off the selected category;\r\n***     If it doesn't match, then don't show the product.\r\n***\r\n*** This is using indexDB for the storage, which is why it's being imported\r\n***     from utils/helpers as idbPromise\r\n*/\r\n\r\n\r\n\r\nfunction ProductList() {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const { currentCategory } = state;\r\n\r\n  const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      dispatch({\r\n        type: UPDATE_PRODUCTS,\r\n        products: data.products,\r\n      });\r\n      // data.products.forEach((product) => {\r\n      //   idbPromise('products', 'put', product);\r\n      // });\r\n    } else if (!loading) {\r\n      // idbPromise('products', 'get').then((products) => {\r\n      //   dispatch({\r\n      //     type: UPDATE_PRODUCTS,\r\n      //     products: products,\r\n      //   });\r\n      // });\r\n      console.log(\"loading\")\r\n    }\r\n  }, [data, loading, dispatch]);\r\n\r\n  function filterProducts() {\r\n    if (!currentCategory) {\r\n      return state.products;\r\n    }\r\n\r\n    return state.products.filter(\r\n      (product) => product.category._id === currentCategory\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"my-2\">\r\n      {/* <h2>Our Products:</h2> */}\r\n      {state.products.length ? (\r\n        <div className=\"flex-row maysSuperItemContainer\">\r\n          {filterProducts().map((product) => (\r\n            <ProductItem\r\n              key={product._id}\r\n              _id={product._id}\r\n              image={product.image}\r\n              name={product.name}\r\n              price={product.price}\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <h3>You have yet to add products.</h3>\r\n      )}\r\n      {loading ? <img src={loadSymbol} alt=\"loading\" /> : null}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ProductList;","import React, { useEffect } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from '../../utils/actions';\r\nimport { QUERY_CATEGORIES } from '../../utils/queries';\r\n// import { idbPromise } from '../../utils/helpers';\r\n\r\n/*\r\n*** @CategoryMenu returns the menu that displays all the categories\r\n*** @useEffect displays the categoryData if it has been retrieved\r\n***     otherwise it will get the categories again?\r\n***\r\n*/\r\n\r\n\r\nfunction CategoryMenu() {\r\n  const [state, dispatch] = useStoreContext();\r\n\r\n  const { categories } = state;\r\n\r\n  const { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\r\n\r\n  useEffect(() => {\r\n    if (categoryData) {\r\n      dispatch({\r\n        type: UPDATE_CATEGORIES,\r\n        categories: categoryData.categories,\r\n      });\r\n      categoryData.categories.forEach((category) => {\r\n        // idbPromise('categories', 'put', category);\r\n      });\r\n    } else if (!loading) {\r\n      // idbPromise('categories', 'get').then((categories) => {\r\n      //   dispatch({\r\n\r\n      //     type: UPDATE_CATEGORIES,\r\n      //     categories: categories,\r\n          \r\n      //   });\r\n      // });\r\n    }\r\n  }, [categoryData, loading, dispatch]);\r\n\r\n  const handleClick = (id) => {\r\n    dispatch({\r\n      type: UPDATE_CURRENT_CATEGORY,\r\n      currentCategory: id,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2 className=\"maysCategory\" >SORT:</h2>\r\n      {categories.map((item) => (\r\n        <button\r\n          key={item._id}\r\n          onClick={() => {\r\n            handleClick(item._id);\r\n          }}\r\n        >\r\n          {item.name}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CategoryMenu;\r\n","import React from 'react';\r\nimport { useStoreContext } from \"../../utils/GlobalState\";\r\nimport { REMOVE_FROM_CART, UPDATE_CART_QUANTITY } from \"../../utils/actions\";\r\nimport { idbPromise } from \"../../utils/IndexDB\";\r\n\r\n/*\r\n***\r\n*** @removeFromCart removes an item from cart\r\n***\r\n*/\r\n\r\n\r\nconst CartItem = ({ item }) => {\r\n\r\n    const [, dispatch] = useStoreContext();\r\n  \r\n    const removeFromCart = item => {\r\n      dispatch({\r\n        type: REMOVE_FROM_CART,\r\n        _id: item._id\r\n      });\r\n      idbPromise('cart', 'delete', { ...item });\r\n    };\r\n  \r\n    return (\r\n      <div className=\"flex-row\">\r\n        <div>\r\n          <img\r\n            src={`/images/${item.image}`}\r\n            alt=\"\"\r\n          />\r\n        </div>\r\n        <div>\r\n          <div>{item.name}: {item.price} MUT</div>\r\n          <div>\r\n            <span\r\n              role=\"img\"\r\n              aria-label=\"trash\"\r\n              onClick={() => removeFromCart(item)}\r\n            >\r\n              REMOVE: 🗑️\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default CartItem;","import decode from \"jwt-decode\";\r\n\r\nclass AuthService {\r\n    getProfile() {\r\n        console.log(\"auth/getProfile\")\r\n        return decode(this.getToken());\r\n    }\r\n\r\n    loggedIn() {\r\n        console.log(\"auth/loggedIn\")\r\n        // This checks to see if there is a saved token and if it is still valid\r\n        const token = this.getToken();\r\n        return !!token && !this.isTokenExpired(token);\r\n    }\r\n\r\n    isTokenExpired(token) {\r\n        console.log(\"auth/isTokenExpired(token)\")\r\n        // function responsible for checking token validity\r\n        try {\r\n            const decoded = decode(token);\r\n            console.log(token)\r\n            console.log(Date.now() / 1000, decoded.exp)\r\n            if (decoded.exp < Date.now() / 1000) {\r\n                console.log(\"this is returning true\")\r\n                return true;\r\n            } else console.log(\"this is returning false\"); return false;\r\n        } catch (err) {\r\n            console.log(\"error\");\r\n            console.error(err);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    getToken() {\r\n        console.log(\"auth/getToken\")\r\n        // Pulls user token from localStorage\r\n        return localStorage.getItem('id_token');\r\n    }\r\n\r\n    login(idToken) {\r\n        console.log(\"auth/login(idToken)\")\r\n        // responsible for saving user token to localStorage\r\n        localStorage.setItem('id_token', idToken);\r\n\r\n        window.location.assign('/');\r\n      }\r\n\r\n    logout() {\r\n        console.log(\"auth/logout\")\r\n        // Clears user token and profile data from localStorage. Second Half reloads page and resets the state\r\n        localStorage.removeItem('id_token');\r\n        // this will reload the page and reset the state of the application\r\n        window.location.assign('/');\r\n      }\r\n    }\r\n    \r\n    export default new AuthService();","import React, { useEffect } from 'react';\r\nimport { loadStripe } from '@stripe/stripe-js';\r\nimport { useLazyQuery } from '@apollo/client';\r\nimport { QUERY_CHECKOUT } from '../../utils/queries';\r\nimport { idbPromise } from '../../utils/IndexDB';\r\nimport CartItem from '../CartItem';\r\nimport Auth from '../../utils/auth';\r\nimport { useStoreContext } from '../../utils/GlobalState';\r\nimport { TOGGLE_CART, ADD_MULTIPLE_TO_CART } from '../../utils/actions';\r\nimport './style.css';\r\n\r\n// stripes public test api key\r\nconst stripePromise = loadStripe('pk_test_TYooMQauvdEDq54NiTphI7jx');\r\n\r\nconst Cart = () => {\r\n  const [state, dispatch] = useStoreContext();\r\n  const [getCheckout, { data }] = useLazyQuery(QUERY_CHECKOUT);\r\n\r\n\r\n  useEffect(() => {\r\n    async function getCart() {\r\n      const cart = await idbPromise('cart', 'get');\r\n      dispatch({ type: ADD_MULTIPLE_TO_CART, products: [...cart] });\r\n    }\r\n\r\n    if (!state.cart.length) {\r\n      getCart();\r\n    }\r\n  }, [state.cart.length, dispatch]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      stripePromise.then((res) => {\r\n        //   using session storage to transfer stuff to the checkout\r\n        res.redirectToCheckout({ sessionId: data.checkout.session });\r\n      });\r\n    }\r\n  }, [data]);\r\n\r\n  function calculateTotal() {\r\n    let sum = 0;\r\n    state.cart.forEach((item) => {\r\n      // adds up the total price\r\n      sum += item.price;\r\n    });\r\n    return sum.toFixed(2);\r\n  }\r\n  \r\n  function toggleCart() {\r\n    dispatch({ type: TOGGLE_CART });\r\n  }\r\n\r\n\r\n  function submitCheckout() {\r\n    const productIds = [];\r\n\r\n    state.cart.forEach((item) => {\r\n      \r\n        productIds.push(item._id);\r\n\r\n    });\r\n\r\n    getCheckout({\r\n      variables: { products: productIds },\r\n    });\r\n  }\r\n\r\n  if (!state.cartOpen) {\r\n    return (\r\n      <div className=\"cart-closed\" onClick={toggleCart}>\r\n        <span role=\"img\" aria-label=\"trash\">\r\n          🛒\r\n        </span>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"cart\">\r\n      <div className=\"close\" onClick={toggleCart}>\r\n        [close]\r\n      </div>\r\n      <h2>Shopping Cart</h2>\r\n      {state.cart.length ? (\r\n        <div>\r\n          {state.cart.map((item) => (\r\n            <CartItem key={item._id} item={item} />\r\n          ))}\r\n\r\n          <div className=\"flex-row space-between\">\r\n            <strong>Total: {calculateTotal()} MUT</strong>\r\n\r\n            {Auth.loggedIn() ? (\r\n              <button onClick={submitCheckout}>Checkout</button>\r\n            ) : (\r\n              <span><br/>(log in to check out)</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <h3>\r\n          {/* <span role=\"img\" aria-label=\"shocked\">\r\n            😱\r\n          </span> */}\r\n          Your cart is empty.\r\n        </h3>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Cart;","import React from \"react\";\r\n\r\n// maybe import Login/ Logout functionality here aswell?\r\n// not sure if this would be a good location for it this early on\r\n\r\n// These will be required for later from components\r\n// Contents to display the List of Products\r\nimport ProductList from \"../components/ProductList\";\r\n// Display the category menu\r\nimport CategoryMenu from \"../components/Categorymenu\";\r\n// This should have all the cart information on it\r\nimport Cart from \"../components/Cart\";\r\n\r\nconst Main = () => {\r\n    return (\r\n        <div className = \"container-fluid\">\r\n            {/* This is the whole page except the navbar */}\r\n\r\n            <Cart />\r\n            <CategoryMenu />\r\n            <ProductList />\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import { gql } from '@apollo/client';\r\n\r\nexport const LOGIN = gql`\r\n  mutation login($email: String!, $password: String!) {\r\n    login(email: $email, password: $password) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_USER = gql`\r\n  mutation addUser(\r\n    $firstName: String!\r\n    $lastName: String!\r\n    $email: String!\r\n    $password: String!\r\n  ) {\r\n    addUser(\r\n      firstName: $firstName\r\n      lastName: $lastName\r\n      email: $email\r\n      password: $password\r\n    ) {\r\n      token\r\n      user {\r\n        _id\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const ADD_ORDER = gql`\r\n  mutation addOrder($products: [ID]!) {\r\n    addOrder(products: $products) {\r\n      purchaseDate\r\n      products {\r\n        _id\r\n        name\r\n        description\r\n        price\r\n        category {\r\n          name\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;","import React, { useState } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport { Link } from 'react-router-dom';\r\nimport { LOGIN } from '../utils/mutations';\r\nimport Auth from '../utils/auth';\r\n\r\nfunction Login(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [login, { error }] = useMutation(LOGIN);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    console.log(\"does it reach here?\", login)\r\n    try {\r\n      console.log(login)\r\n      const mutationResponse = await login({\r\n        variables: { email: formState.email, password: formState.password },\r\n      });\r\n      const token = mutationResponse.data.login.token;\r\n      console.log(\"it doesn't even make it this far\")\r\n      Auth.login(token);\r\n    } catch (e) {\r\n      console.log(\"this is the error lmao\", e);\r\n    }\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/signup\">← Go to Signup</Link>\r\n\r\n      <h2>Login</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email address:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        {error ? (\r\n          <div>\r\n            <p className=\"error-text\">The provided credentials are incorrect</p>\r\n          </div>\r\n        ) : null}\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;","import React from \"react\";\r\nimport { Link } from 'react-router-dom';\r\nimport Auth from \"../../utils/auth\";\r\nimport './style.css'\r\n// import Cart from \"../../components/cart\";\r\n\r\nfunction Nav() {\r\n\r\n    function showNavigation() {\r\n        if (Auth.loggedIn()) {\r\n            return (\r\n                <div className=\"flex-row navbar menu-nav\">\r\n                <h4 className=\"mx-1\">\r\n                  <Link to=\"/orderHistory\" className=\"links-nav\">\r\n                      Purchase History\r\n                  </Link>\r\n                </h4>\r\n                <h4 className=\"mx-1\">\r\n                  {/* this is not using the Link component to logout or user and then refresh the application to the start */}\r\n                  <a className=\"links-nav\" href=\"/\" onClick={() => Auth.logout()}>\r\n                      Logout\r\n                  </a>\r\n                </h4>\r\n              </div>\r\n            );\r\n        } else {\r\n            return(\r\n                <ul className=\"flex-row  menu-nav \">\r\n                <li className=\"mx-1\">\r\n                  <Link to=\"/signup\" className=\"links-nav\">\r\n                    Signup\r\n                  </Link>\r\n                </li>\r\n                <li className=\"mx-1\">\r\n                  <Link to=\"/login\" className=\"links-nav\">\r\n                    Login\r\n                  </Link>\r\n                </li>\r\n              </ul>     \r\n                )\r\n        }\r\n    }\r\n    return(\r\n        <header className=\"flex-row px-1 navbar \">\r\n        <h1>\r\n          <Link to=\"/\" className=\"links-nav mayMainNav\">\r\n            MNIFTY\r\n          </Link>\r\n        </h1>\r\n      \r\n        <nav>\r\n          {showNavigation()}\r\n        </nav>\r\n      </header>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React, { useEffect, useState } from \"react\";\r\nimport { Link, useParams, } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/client\";\r\n\r\nimport VanillaTilt from \"vanilla-tilt\";\r\n\r\nimport Cart from \"../components/Cart\";\r\n// don't current need Cart but will in the future\r\n\r\nimport { useStoreContext } from \"../utils/GlobalState\";\r\n\r\n// import strings that reference actions from actions.js\r\nimport {\r\n    REMOVE_FROM_CART,\r\n    UPDATE_CART_QUANTITY,\r\n    ADD_TO_CART,\r\n    UPDATE_PRODUCTS,\r\n} from \"../utils/actions\";\r\n\r\n//used to query an individual product rather than all\r\nimport { QUERY_PRODUCTS } from \"../utils/queries\";\r\nimport { idbPromise } from \"../utils/IndexDB\";\r\n\r\nimport loadingSpin from \"../assets/loading.gif\";\r\n\r\nfunction Detail() {\r\n    const [state, dispatch] = useStoreContext();\r\n    const { id } = useParams();\r\n    const [currentProduct, setCurrentProduct] = useState({});\r\n    const { loading, data } = useQuery(QUERY_PRODUCTS);\r\n    const { products, cart } = state;\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        // checks to see if a product already exists within the global store\r\n        if (products.length) {\r\n            setCurrentProduct(products.find((product) => product._id === id));\r\n        } else if (data) {\r\n            // if the product doesn't exist in the global store then it will check the server data\r\n            dispatch({\r\n                type: UPDATE_PRODUCTS,\r\n                products: data.products,\r\n            });\r\n\r\n            data.products.forEach((product) => {\r\n                idbPromise('products', 'put', product);\r\n            });\r\n        } else if (!loading) {\r\n            // if it doesn't exist in global store or server then it will pull the caache from indexDB\r\n            idbPromise('products', 'get').then((indexedProducts) => {\r\n                dispatch({\r\n                    type: UPDATE_PRODUCTS,\r\n                    products: indexedProducts,\r\n                });\r\n            });\r\n        }\r\n    }, [products, data, loading, dispatch, id]);\r\n\r\n\r\n    const addToCart = () => {\r\n        const itemInCart = cart.find((cartItem) => cartItem._id === id);\r\n        // checks to see if an item matching the item's id currently exists in the car, if it does then it will modify the quanty of that item when added\r\n        if (itemInCart) {\r\n            dispatch({\r\n                type: UPDATE_CART_QUANTITY,\r\n                _id: id,\r\n                purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n            });\r\n            //uses put to update the cart quantity\r\n            idbPromise('cart', 'put', {\r\n                ...itemInCart,\r\n                purchaseQuantity: parseInt(itemInCart.purchaseQuantity) + 1,\r\n            });\r\n        } else {\r\n            //however, if no item matching the id currently exists, then it will be added to the cart and set the quantity to 1\r\n            dispatch({\r\n                type: ADD_TO_CART,\r\n                product: { ...currentProduct, purchaseQuantity: 1 },\r\n            });\r\n            idbPromise('cart', 'put', { ...currentProduct, purchaseQuantity: 1 });\r\n            }\r\n        };\r\n\r\n        const removeFromCart = () => {\r\n            // deletes an item from the cart based on product id number\r\n            dispatch({\r\n                type: REMOVE_FROM_CART,\r\n                _id: currentProduct._id,\r\n            });\r\n\r\n            idbPromise('cart', 'delete', { ...currentProduct });\r\n        };\r\n\r\n        VanillaTilt.init(document.querySelector(\".solo-card\"), {\r\n            max: 25,\r\n            speed: 400,\r\n            glare: true,\r\n            \"max-glare\": 1,\r\n            \"glare-prerender\": false,\r\n        });\r\n\r\n        \r\n        return (\r\n            <>\r\n                {currentProduct && cart ? (\r\n                    <div className=\"card px-1 py-1 glassCard solo-card\">\r\n                        <Link to=\"/\">← Back to Products</Link>\r\n                        <h2>{currentProduct.name}</h2>\r\n                        <p>{currentProduct.description}</p>\r\n                        <img\r\n                            src={`/images/${currentProduct.image}`}\r\n                            alt={currentProduct.name}\r\n                        />\r\n                        <p>\r\n                            <strong>Price:</strong> {currentProduct.price} MUT Tokens {' '}\r\n                            <button \r\n\r\n                            disabled={cart.find((p) => p._id === currentProduct._id)}\r\n                            onClick={addToCart}>+ ADD TO CART</button>\r\n                            \r\n                            <button\r\n                                disabled={!cart.find((p) => p._id === currentProduct._id)}\r\n                                onClick={removeFromCart}>\r\n                                Remove from Cart\r\n                            </button>\r\n                        </p>\r\n                    </div>\r\n                ) : null}\r\n                {loading ? <img src={loadingSpin} alt=\"loading\" /> : null}\r\n                <Cart />\r\n            </>\r\n        );\r\n    };\r\n\r\n    export default Detail;","import React, { useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { useMutation } from '@apollo/client';\r\nimport Auth from '../utils/auth';\r\nimport { ADD_USER } from '../utils/mutations';\r\n\r\nfunction Signup(props) {\r\n  const [formState, setFormState] = useState({ email: '', password: '' });\r\n  const [addUser] = useMutation(ADD_USER);\r\n\r\n  const handleFormSubmit = async (event) => {\r\n    event.preventDefault();\r\n    const mutationResponse = await addUser({\r\n      variables: {\r\n        email: formState.email,\r\n        password: formState.password,\r\n        firstName: formState.firstName,\r\n        lastName: formState.lastName,\r\n      },\r\n    });\r\n    const token = mutationResponse.data.addUser.token;\r\n    console.log(token)\r\n    Auth.login(token);\r\n  };\r\n\r\n  const handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setFormState({\r\n      ...formState,\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div className=\"container my-1\">\r\n      <Link to=\"/login\">← Go to Login</Link>\r\n\r\n      <h2>Signup</h2>\r\n      <form onSubmit={handleFormSubmit}>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"firstName\">First Name:</label>\r\n          <input\r\n            placeholder=\"First\"\r\n            name=\"firstName\"\r\n            type=\"firstName\"\r\n            id=\"firstName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"lastName\">Last Name:</label>\r\n          <input\r\n            placeholder=\"Last\"\r\n            name=\"lastName\"\r\n            type=\"lastName\"\r\n            id=\"lastName\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"email\">Email:</label>\r\n          <input\r\n            placeholder=\"youremail@test.com\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            id=\"email\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row space-between my-2\">\r\n          <label htmlFor=\"pwd\">Password:</label>\r\n          <input\r\n            placeholder=\"******\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            id=\"pwd\"\r\n            onChange={handleChange}\r\n          />\r\n        </div>\r\n        <div className=\"flex-row flex-end\">\r\n          <button type=\"submit\">Submit</button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Signup;","import React from \"react\";\r\n\r\n\r\n// sets the styling for the jumbotron used in NoMatch.js\r\nfunction Jumbotron({ children }) {\r\n  return (\r\n    <div\r\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\r\n    >\r\n      {children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React, { useEffect } from 'react';\r\nimport { useMutation } from '@apollo/client';\r\nimport Jumbotron from '../components/Jumbotron';\r\nimport { ADD_ORDER } from '../utils/mutations';\r\nimport { idbPromise } from '../utils/IndexDB';\r\n\r\nfunction Success() {\r\n    const [addOrder] = useMutation(ADD_ORDER);\r\n  \r\n    useEffect(() => {\r\n      async function saveOrder() {\r\n        const cart = await idbPromise('cart', 'get');\r\n        const products = cart.map((item) => item._id);\r\n  \r\n        if (products.length) {\r\n            const { data } = await addOrder({ variables: { products } });\r\n            const productData = data.addOrder.products;\r\n    \r\n            productData.forEach((item) => {\r\n              idbPromise('cart', 'delete', item);\r\n            });\r\n          }\r\n    \r\n          setTimeout(() => {\r\n            window.location.assign('/');\r\n          }, 3000);\r\n        }\r\n\r\n        saveOrder();\r\n  }, [addOrder]);\r\n\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>Thank you for your purchase!</h1>\r\n        <h2>You will now be redirected to the home page</h2>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Success;\r\n","import React from \"react\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n\r\n\r\n\r\n// we have this \"ABSOLUTE MASSIVE UNIT\" of an error message\r\n//  appear if the user hit a weird route.\r\nconst NoMatch = () => {\r\n  return (\r\n    <div>\r\n      <Jumbotron>\r\n        <h1>404 Page Not Found</h1>\r\n        <br/>\r\n        <h1>\r\n          Sorry, the page you are looking for is on vacation and won't be back for at least 10-24 business days.\r\n        </h1>\r\n      </Jumbotron>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NoMatch;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useQuery } from '@apollo/client';\r\nimport { QUERY_USER } from '../utils/queries';\r\n\r\n\r\nfunction OrderHistory() {\r\n    const { data } = useQuery(QUERY_USER);\r\n    let user;\r\n  \r\n    if (data) {\r\n      user = data.user;\r\n    }\r\n\r\n    return(\r\n        <>\r\n      <div className=\"container my-1\">\r\n        <Link to=\"/\">← Back to Products</Link>\r\n\r\n        {user ? (\r\n          <>\r\n            <h2>\r\n              Order History for {user.firstName} {user.lastName}\r\n            </h2>\r\n            {user.orders.map((order) => (\r\n              <div key={order._id} className=\"my-2\">\r\n                <h3>\r\n                  {new Date(parseInt(order.purchaseDate)).toLocaleDateString()}\r\n                </h3>\r\n                <div className=\"flex-row\">\r\n                  {order.products.map(({ _id, image, name, price }, index) => (\r\n                    <div key={index} className=\"card px-1 py-1\">\r\n                      <Link to={`/products/${_id}`}>\r\n                        <img alt={name} src={`/images/${image}`} />\r\n                        <p>{name}</p>\r\n                      </Link>\r\n                      <div>\r\n                        <span>${price}</span>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </>\r\n        ) : null}\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default OrderHistory;\r\n    ","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport {\r\n  ApolloClient,\r\n  InMemoryCache,\r\n  ApolloProvider,\r\n  createHttpLink,\r\n} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\n\r\n// Importing allll of the pages that we'll be able to navigate\r\n// -- but they're sorted by line length.\r\nimport Main from './pages/Main';\r\nimport Login from './pages/Login';\r\nimport Nav from './components/Nav';\r\nimport Detail from \"./pages/Detail\";\r\n\r\nimport Signup from './pages/Signup';\r\nimport Success from './pages/Success';\r\n\r\nimport NoMatch from './pages/NoMatch';\r\nimport OrderHistory from './pages/OrderHistory';\r\nimport { StoreProvider } from './utils/GlobalState';\r\n\r\n\r\n\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: '/graphql',\r\n});\r\n\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('id_token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    },\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n});\r\n\r\n// the several routes\r\nfunction App() {\r\n  return (\r\n    <ApolloProvider client={client}>\r\n      <Router>\r\n        <div>\r\n          <StoreProvider>\r\n            <Nav />\r\n            <Switch>\r\n              <Route exact path=\"/\" component={Main} />\r\n              <Route exact path=\"/login\" component={Login} />\r\n              <Route exact path=\"/signup\" component={Signup} />\r\n              <Route exact path=\"/success\" component={Success} />\r\n              <Route exact path=\"/orderHistory\" component={OrderHistory} />\r\n              <Route exact path=\"/products/:id\" component={Detail} />\r\n              <Route component={NoMatch} />\r\n            </Switch>\r\n          </StoreProvider>\r\n        </div>\r\n      </Router>\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}